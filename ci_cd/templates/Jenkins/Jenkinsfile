import groovy.json.JsonSlurper 
import org.apache.commons.lang.StringEscapeUtils;
import groovy.json.JsonOutput;

@NonCPS
def request(url, method){
    def req = new URL("${url}").openConnection();
    req.setRequestMethod("${method}");
    req.setDoOutput(true);
    req.setRequestProperty("Content-Type", "application/json");
    req.setRequestProperty("X-Accept-Vulnerabilities", "application/vnd.security.vulnerability.report; version=1.1, application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0");
    return req.content.text;
}

pipeline {
  agent any;
        
  environment {
      registryCredential = ''; // Regstry credential
  }

  parameters {
    string(
      name: 'DOCKER_REGISTRY',
      defaultValue: 'registry.docker.io',
      description: '' );
    string(
      name: 'PROJECT_DIR',
      defaultValue: 'path/to/project',
      description: '' );
    string(
      name: 'UNSAFE_PROJECT',
      defaultValue: 'unsafe',
      description: '' );
    string(
      name: 'PROJECT',
      defaultValue: 'realese',
      description: '' );
    string(
      name: 'REPOSITORY',
      defaultValue: 'test',
      description: '' );
    string(
      name: 'TAG',
      defaultValue: 'test',
      description: '' );
  }

  stages {
    stage("Build unsafe"){
      step{
        if(${PROJECT_DIR} != "") {
          sh """
            echo '${PROJECT_DIR}/Dockerfile' > Dockerfile
          """;
        }

        script {
          docker.withRegistry("https://${DOCKER_REGISTRY}", registryCredential) {
              def image = docker.build("${UNSAFE_PROJECT}/${REPOSITORY}", ".");
              image.push("${TAG}");
          }
        }
      }
    }

    stage("Vulnerabilities status"){
      step {
        script {
          validValues = ["None", "Low", "Medium"];
    
          def jsonSlurper = new JsonSlurper();
          for(int i = 0; i < 10; i++){
            def getRC = request(
              "https://${DOCKER_REGISTRY}/api/v2.0/projects/${UNSAFE_PROJECT}/repositories/${REPOSITORY}/artifacts/${TAG}?with_scan_overview=true",
              "GET"
            );
            
            def json = jsonSlurper.parseText(getRC); 
            def status = json["scan_overview"]["application/vnd.security.vulnerability.report; version=1.1"]["severity"];

            if(status in validValues){
              sh "exit 0";
            } else if (status != "null") {
              sh "exit 1";
            }

            sleep(30);
          }

          sh "exit 1";
        }
      }
    }

    stage("Build"){
      step{
        if(${PROJECT_DIR} != "") {
          sh """
            echo '${PROJECT_DIR}/Dockerfile' > Dockerfile
          """;
        }

        script {
          docker.withRegistry("https://${DOCKER_REGISTRY}", registryCredential) {
              def image = docker.build("${PROJECT}/${REPOSITORY}", ".");
              image.push("${TAG}");
          }
        }
      }
    }
  }
}
